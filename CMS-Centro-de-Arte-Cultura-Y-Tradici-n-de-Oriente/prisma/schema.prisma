// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Billboard {
  id          String  @id @default(cuid())
  title       String
  description String?
  image       String
  buttonLabel String
  href        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AboutUs {
  id          String  @id @default(cuid())
  title       String
  description String
  image       String
  reverse     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gallery {
  id String @id @default(cuid())
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id String @id @default(cuid())
  title String
  description String
  imageUrl String
  link String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String  @id @default(cuid())
  title       String
  description String
  image       String
  reverse     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpecialEvent {
  id          String   @id @default(cuid())
  title       String
  description String
  address     String
  startDate   DateTime
  endDate     DateTime
  billboard   String // Imagen del evento
  images      String[] @default([])
  podcastUrl  String?
  videoUrl    String?

  comments SpecialEventComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpecialEventComment {
  id      String @id @default(cuid())
  name    String
  comment String

  eventId String
  event   SpecialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  address     String
  startDate   DateTime
  endDate     DateTime
  billboard   String // Imagen del evento
  images      String[] @default([])
  podcastUrl  String?
  videoUrl    String?

  comments EventComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventComment {
  id      String @id @default(cuid())
  name    String
  comment String

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonials {
  id       String @id @default(cuid())
  name     String
  position String
  content  String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
